#!/bin/bash

###############################################################################
# Claude Secrets Manager - Package Post-Installation Script - Version "0.4.2"
# Follows standard macOS package installer patterns
# Based on XCreds postinstall.sh structure
###############################################################################

set -x

# Standard package installer parameters
PACKAGE_PATH="${1}"
TARGET="${2}"       # Target path (destination) 
TARGET_VOLUME="${3}" # Target volume
loggedInUser=$(stat -f %Su /dev/console)
userID=$(id -u "$loggedInUser")

echo "üéØ Claude Secrets Manager - Post-Installation"
echo "=============================================="
echo "Package: $PACKAGE_PATH"
echo "Target: $TARGET"
echo "Volume: $TARGET_VOLUME"

# Function to get user home directory
get_user_home() {
    local username="$1"
    local user_home=""
    user_home=$(dscl . -read "/Users/$username" NFSHomeDirectory 2>/dev/null | awk '{print $2}')
    if [[ -z "$user_home" ]]; then
        user_home="/Users/$username"
    fi
    echo "$user_home"
}

# Detect the console user
# CONSOLE_USER=$(detect_console_user)
if [[ -z "$loggedInUser" || "$loggedInUser" == "root" ]]; then
    echo "‚ö†Ô∏è  Warning: Could not detect console user, using fallback"
    loggedInUser="$(ls /Users | grep -v Shared | head -1)"
fi

echo "üë§ Detected console user: $loggedInUser"

# Get user home directory
USER_HOME=$(get_user_home "$loggedInUser")
echo "üè† User home directory: $USER_HOME"


echo ""
echo "üîß Setting up LaunchAgent..."

# Move LaunchAgent plist to user's LaunchAgents directory
LAUNCHAGENTS_DIR="${USER_HOME}/Library/LaunchAgents"
plistPath="${LAUNCHAGENTS_DIR}/com.oemden.claudesecrets.plist"

if [[ -f "/tmp/ClaudeSecretsManager/com.oemden.claudesecrets.plist" ]]; then
    # Create LaunchAgents directory if it doesn't exist
    if [[ ! -d "$LAUNCHAGENTS_DIR" ]]; then
        mkdir -p "$LAUNCHAGENTS_DIR"
        chown "$loggedInUser:staff" "$LAUNCHAGENTS_DIR"
        chmod 755 "$LAUNCHAGENTS_DIR"
    fi
    
    # Copy plist to user's LaunchAgents directory
    cp "/tmp/ClaudeSecretsManager/com.oemden.claudesecrets.plist" "$plistPath"
    chown "$loggedInUser:staff" "$plistPath"
    chmod 644 "$plistPath"
    rm -f "/tmp/ClaudeSecretsManager/com.oemden.claudesecrets.plist"
    # Enable the daemon
    echo "   ‚úÖ LaunchAgent plist installed: $plistPath"
    echo "üöÄ Enabling LaunchAgent..."
    # sudo -u "$loggedInUser" launchctl load -w "${PLIST_DEST}"
    ## ENABLE Agent
    launchctl enable gui/$userID/com.oemden.claudesecrets                                                                                                                                                                                                                                                                                                                                                                                                               
    ## LOAD Agent
    # launchctl bootstrap gui/503 /Users/$loggedInUser/Library/LaunchAgents/com.oemden.claudesecrets.plist                                                                                                                                                                                                                                                                                                                                                            
    launchctl bootstrap gui/$userID "$plistPath"
    # launchctl bootstrap gui/$userID /Users/$loggedInUser/Library/LaunchAgents/com.oemden.claudesecrets.plist
    ## UNLOAD
    # launchctl bootout gui/503 /Users/$loggedInUser/Library/LaunchAgents/com.oemden.claudesecrets.plist

    echo "   ‚úÖ LaunchAgent enabled and started"
else
    echo "   ‚ùå LaunchAgent plist not found in /tmp/ClaudeSecretsManager"
    exit 1
fi

echo ""
echo "üìÅ Creating configuration directories and files (if missing)..."

# Create .claudesecrets directory
SECRETS_DIR="${USER_HOME}/.claudesecrets"
if [[ ! -d "$SECRETS_DIR" ]]; then
    mkdir -p "$SECRETS_DIR"
    chown "$loggedInUser:staff" "$SECRETS_DIR"
    chmod 700 "$SECRETS_DIR"
    echo "   ‚úÖ Created secrets directory: $SECRETS_DIR"
fi

# Create secrets file (ONLY if it doesn't exist)
SECRETS_FILE="${SECRETS_DIR}/.claude_secrets"
if [[ ! -f "$SECRETS_FILE" ]]; then
    cat > "$SECRETS_FILE" << 'EOF'
# Claude Secrets Manager - Secrets File
# Format: KEY=VALUE or export KEY=VALUE
# 
# Example API keys:
# OPENAI_API_KEY=your_openai_api_key_here
# ANTHROPIC_API_KEY=your_anthropic_api_key_here
# GOOGLE_API_KEY=your_google_api_key_here
#
# Add your secrets below:

EOF
    chown "$loggedInUser:staff" "$SECRETS_FILE"
    chmod 600 "$SECRETS_FILE"
    echo "   ‚úÖ Created secrets file: $SECRETS_FILE"
else
    echo "   üõ°Ô∏è  Existing secrets file preserved: $SECRETS_FILE"
fi

# Create Claude config directory if needed
CLAUDE_CONFIG_DIR="${USER_HOME}/Library/Application Support/Claude"
if [[ ! -d "$CLAUDE_CONFIG_DIR" ]]; then
    mkdir -p "$CLAUDE_CONFIG_DIR"
    chown "$loggedInUser:staff" "$CLAUDE_CONFIG_DIR"
    chmod 755 "$CLAUDE_CONFIG_DIR"
    echo "   ‚úÖ Created Claude config directory"
fi

# Create template file (ONLY if it doesn't exist)
TEMPLATE_FILE="${CLAUDE_CONFIG_DIR}/claude_desktop_config_template.json"
CONFIG_FILE="${CLAUDE_CONFIG_DIR}/claude_desktop_config.json"

if [[ ! -f "$TEMPLATE_FILE" ]]; then
    if [[ -f "$CONFIG_FILE" ]]; then
        # Use existing config as template base
        cp "$CONFIG_FILE" "$TEMPLATE_FILE"
        echo "   ‚úÖ Created template from existing config: $TEMPLATE_FILE"
    else
        # Create default template
        cat > "$TEMPLATE_FILE" << 'EOF'
{
  "mcpServers": {
    "example": {
      "command": "example-command",
      "args": ["--arg1", "VALUE_FROM_SECRETS"],
      "env": {
        "API_KEY": "OPENAI_API_KEY"
      }
    }
  }
}
EOF
        echo "   ‚úÖ Created default template: $TEMPLATE_FILE"
    fi
    chown "$loggedInUser:staff" "$TEMPLATE_FILE"
    chmod 644 "$TEMPLATE_FILE"
else
    echo "   üõ°Ô∏è  Existing template file preserved: $TEMPLATE_FILE"
fi

# Create complete domain preferences 
echo ""
echo "‚öôÔ∏è  Setting up complete domain preferences..."

# Read existing values for critical keys (if they exist)
EXISTING_SECRETS_FILE=$(sudo -u "$loggedInUser" defaults read com.oemden.claudesecrets secrets_file 2>/dev/null || echo "")
EXISTING_TEMPLATE_FILE=$(sudo -u "$loggedInUser" defaults read com.oemden.claudesecrets template_claudedesktop_config_file 2>/dev/null || echo "")

# Set all domain preferences (complete set)
sudo -u "$loggedInUser" defaults write com.oemden.claudesecrets always_reset_config_at_launch -bool false
sudo -u "$loggedInUser" defaults write com.oemden.claudesecrets always_secure_config -bool true
sudo -u "$loggedInUser" defaults write com.oemden.claudesecrets first_run_claudecode_config_backup_file "~/Library/Application Support/Claude/claude_desktop_config.firstrun.backup.json"
sudo -u "$loggedInUser" defaults write com.oemden.claudesecrets first_run_claudedesktop_config_backup_file "~/Library/Application Support/Claude/claude_desktop_config.firstrun.backup.json"
sudo -u "$loggedInUser" defaults write com.oemden.claudesecrets first_run_done -bool true
sudo -u "$loggedInUser" defaults write com.oemden.claudesecrets macos_notifications -bool true
sudo -u "$loggedInUser" defaults write com.oemden.claudesecrets manage_ClaudeCode_config -bool true
sudo -u "$loggedInUser" defaults write com.oemden.claudesecrets manage_ClaudeDesktop_config -bool true
sudo -u "$loggedInUser" defaults write com.oemden.claudesecrets log_level "normal"
sudo -u "$loggedInUser" defaults write com.oemden.claudesecrets voice_notifications -bool false
sudo -u "$loggedInUser" defaults write com.oemden.claudesecrets secrets_mechanism "keychain"
sudo -u "$loggedInUser" defaults write com.oemden.claudesecrets shareClaudeDesktop_config_withClaudeCode -bool true
sudo -u "$loggedInUser" defaults write com.oemden.claudesecrets target_claudecode_config_file "~/Library/Application Support/Claude/claude_desktop_config.json"
sudo -u "$loggedInUser" defaults write com.oemden.claudesecrets target_claudedesktop_config_file "~/Library/Application Support/Claude/claude_desktop_config.json"

# Handle secrets_file - preserve existing if it exists, otherwise use default
if [[ -n "$EXISTING_SECRETS_FILE" ]]; then
    sudo -u "$loggedInUser" defaults write com.oemden.claudesecrets secrets_file "$EXISTING_SECRETS_FILE"
    echo "   üõ°Ô∏è  Preserved existing secrets_file: $EXISTING_SECRETS_FILE"
else
    sudo -u "$loggedInUser" defaults write com.oemden.claudesecrets secrets_file "~/.claudesecrets/.claude_secrets"
fi

# Handle template_claudedesktop_config_file - preserve existing if it exists, otherwise use default
if [[ -n "$EXISTING_TEMPLATE_FILE" ]]; then
    sudo -u "$loggedInUser" defaults write com.oemden.claudesecrets template_claudedesktop_config_file "$EXISTING_TEMPLATE_FILE"
    sudo -u "$loggedInUser" defaults write com.oemden.claudesecrets template_claudecode_config_file  "$EXISTING_TEMPLATE_FILE"
    echo "   üõ°Ô∏è  Preserved existing template_claudedesktop_config_file: $EXISTING_TEMPLATE_FILE"  
else
    sudo -u "$loggedInUser" defaults write com.oemden.claudesecrets template_claudedesktop_config_file "~/Library/Application Support/Claude/claude_desktop_config_template.json"
    sudo -u "$loggedInUser" defaults write com.oemden.claudesecrets template_claudecode_config_file "~/Library/Application Support/Claude/claude_desktop_config_template.json"
fi

# Set proper permissions on the preferences file
PREFS_FILE="${USER_HOME}/Library/Preferences/com.oemden.claudesecrets.plist"
if [[ -f "$PREFS_FILE" ]]; then
    chown "$loggedInUser:staff" "$PREFS_FILE"
    chmod 600 "$PREFS_FILE"
    echo "   ‚úÖ Preferences file permissions set: $PREFS_FILE"
fi

echo "   ‚úÖ Complete domain preferences configured"

echo ""
echo "üéâ Installation Complete!"
echo "========================"
echo "‚úÖ Binaries installed: /usr/local/bin/claudesecrets, /usr/local/bin/claudesecrets-cli"
echo "‚úÖ LaunchAgent configured: ~/Library/LaunchAgents/com.oemden.claudesecrets.plist"
echo "‚úÖ Configuration directories created"
echo "üõ°Ô∏è  Existing secrets and templates preserved"
echo ""
echo "üöÄ Quick Start:"
echo "   claudesecrets-cli --help     # Show available commands"
echo "   claudesecrets-cli --status   # Check daemon status"
echo "   claudesecrets-cli --enable   # Start the daemon"
echo ""

# Import keychain secrets if they were exported during pre-install
echo ""
echo "üîê Checking for keychain secrets to import..."

if [[ -f "/tmp/claudesecrets_migration_path" ]]; then
    echo "   üîë Migration data found, attempting import..."
    
    # Import keychain secrets with new binary ownership
    if /usr/local/bin/claudesecrets-cli --upgrade --import; then
        echo "   ‚úÖ Keychain secrets imported successfully"
        echo "   üéâ Seamless keychain migration completed!"
    else
        echo "   ‚ö†Ô∏è  Failed to import keychain secrets"
        echo "   üí° You may need to manually migrate keychain entries:"
        echo "      CLAUDE_FORCE_UPGRADE=1 claudesecrets-cli --upgrade"
    fi
else
    echo "   ‚ÑπÔ∏è  No migration data found - no keychain import needed"
fi

# Display Status
echo ""
/usr/local/bin/claudesecrets-cli --status

# Clean up any remaining temporary files
rm -rf /tmp/ClaudeSecretsManager 2>/dev/null || true

exit 0